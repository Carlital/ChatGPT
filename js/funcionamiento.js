// ==========================================
// FUNCIONAMIENTO.JS - Interactividades
// ==========================================

document.addEventListener('DOMContentLoaded', () => {
  console.log('‚úÖ funcionamiento.js cargado');

  // ==========================================
  // 1. TOKENIZADOR INTERACTIVO
  // ==========================================
  const tokenInput = document.getElementById('tokenInput');
  const tokenOutput = document.getElementById('tokenOutput');

  if (tokenInput && tokenOutput) {
    tokenInput.addEventListener('input', (e) => {
      const text = e.target.value.trim();
      
      if (!text) {
        tokenOutput.innerHTML = '<span class="token-hint">Los tokens aparecer√°n aqu√≠...</span>';
        return;
      }

      // Simulaci√≥n simple de tokenizaci√≥n
      // Divide por espacios y puntuaci√≥n
      const tokens = text.split(/(\s+|[.,!?;:¬ø¬°()[\]{}])/g)
        .filter(t => t.trim().length > 0);
      
      tokenOutput.innerHTML = tokens.map(token => 
        `<span class="token-item">${escapeHtml(token)}</span>`
      ).join('');
    });
  }

  // Helper para escapar HTML
  function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  }


  // ==========================================
  // 2. MODALES DE ARQUITECTURA
  // ==========================================
  const modalTriggers = document.querySelectorAll('.modal-trigger');
  
  // Abrir modal al hacer clic en las cards de arquitectura
  modalTriggers.forEach(trigger => {
    trigger.addEventListener('click', () => {
      const modalId = trigger.dataset.modal;
      console.log('üîç Abriendo modal:', modalId);
      openModal(modalId);
    });
  });

  // Cerrar modal al hacer clic fuera del contenido o en el bot√≥n X
  document.addEventListener('click', (e) => {
    // Si es el overlay (fondo oscuro)
    if (e.target.classList.contains('modal-overlay')) {
      e.target.classList.remove('active');
      document.body.style.overflow = '';
    }
    
    // Si es el bot√≥n cerrar
    if (e.target.classList.contains('modal-close')) {
      const modal = e.target.closest('.modal-overlay');
      if (modal) {
        modal.classList.remove('active');
        document.body.style.overflow = '';
      }
    }
  });

  // Cerrar con tecla ESC
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      const activeModal = document.querySelector('.modal-overlay.active');
      if (activeModal) {
        activeModal.classList.remove('active');
        document.body.style.overflow = '';
      }
    }
  });

  // ==========================================
  // 3. CLICKS EN LOS PASOS DEL FLUJO
  // ==========================================
  const flowSteps = document.querySelectorAll('.clickable-flow');
  const flowDetailPanel = document.getElementById('flowDetailPanel');
  const flowDetailText = document.getElementById('flowDetailText');

  const flowDetails = {
    '1': 'üìù <strong>Tu mensaje es recibido</strong> por la interfaz de ChatGPT y enviado al servidor de procesamiento donde comienza el an√°lisis.',
    '2': 'üîé <strong>El texto se divide en tokens</strong> (fragmentos de palabras o caracteres). El modelo analiza el contexto, la intenci√≥n y el tema de tu pregunta.',
    '3': 'üß† <strong>El modelo Transformer predice</strong> palabra por palabra cu√°l es la respuesta m√°s √∫til bas√°ndose en patrones que aprendi√≥ durante el entrenamiento.',
    '4': 'üõ°Ô∏è <strong>Se aplican filtros de seguridad</strong> para evitar contenido da√±ino, verificar que la respuesta sea apropiada y cumplir las pol√≠ticas de uso.',
    '5': '‚úÖ <strong>La respuesta final se formatea</strong> y se te muestra en lenguaje natural, clara y legible para que puedas leerla f√°cilmente.'
  };

  flowSteps.forEach(step => {
    step.addEventListener('click', () => {
      const flowId = step.dataset.flow;
      
      // Remover active de todos
      flowSteps.forEach(s => s.classList.remove('active'));
      
      // Activar el clickeado
      step.classList.add('active');
      
      // Mostrar detalle
      if (flowDetailPanel && flowDetailText && flowDetails[flowId]) {
        flowDetailText.innerHTML = flowDetails[flowId];
        flowDetailPanel.style.display = 'block';
        
        // Scroll suave hacia el panel
        setTimeout(() => {
          flowDetailPanel.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
        }, 100);
      }
    });
  });


  // ==========================================
  // 4. MINI-CHAT INTELIGENTE
  // ==========================================
  const chatForm = document.getElementById('mini-chat-form');
  const chatInput = document.getElementById('chat-input');
  const chatMessages = document.getElementById('chat-messages');

  // Respuestas basadas en palabras clave
  const chatResponses = {
    'token': 'Un <strong>token</strong> es una unidad b√°sica de texto que el modelo procesa. Puede ser una palabra completa, parte de una palabra, o incluso s√≠mbolos. Por ejemplo: "ChatGPT" podr√≠a dividirse en 1-2 tokens seg√∫n el modelo. Los tokens son importantes porque limitan cu√°nto texto puede procesar el modelo de una vez.',
    
    'transformer': 'El <strong>Transformer</strong> es una arquitectura de red neuronal que revolucion√≥ el procesamiento del lenguaje natural. Usa mecanismos de "atenci√≥n" para entender qu√© partes de un texto son m√°s relevantes. Es la base de ChatGPT, GPT-4, y otros modelos modernos de IA.',
    
    'educaci√≥n': 'En <strong>educaci√≥n</strong>, ChatGPT puede: 1) Actuar como tutor personalizado 24/7, 2) Generar ejercicios y ex√°menes, 3) Explicar conceptos dif√≠ciles de m√∫ltiples formas, 4) Dar retroalimentaci√≥n instant√°nea, 5) Ayudar con ideas para proyectos. Pero siempre debe <em>complementar</em>, nunca <em>reemplazar</em> al docente.',
    
    'l√≠mites': 'ChatGPT tiene <strong>l√≠mites importantes</strong>: 1) Puede "alucinar" (inventar datos que suenan reales pero son falsos), 2) Su conocimiento tiene una fecha de corte, 3) No tiene acceso a internet en tiempo real, 4) No debe usarse para decisiones m√©dicas o legales cr√≠ticas, 5) Puede tener sesgos de sus datos de entrenamiento.',
    
    'funciona': 'ChatGPT <strong>funciona</strong> en 4 pasos principales: 1) Analiza tu mensaje dividi√©ndolo en tokens, 2) Usa una red neuronal Transformer para entender el contexto, 3) Predice palabra por palabra la mejor respuesta bas√°ndose en patrones aprendidos, 4) Aplica filtros de seguridad antes de mostrarte la respuesta final.',
    
    'atenci√≥n': 'El mecanismo de <strong>atenci√≥n</strong> (self-attention) permite que el modelo decida qu√© partes de tu mensaje son m√°s relevantes para generar una buena respuesta. Por ejemplo, en "El gato que estaba en la casa maullaba", el modelo "presta m√°s atenci√≥n" a "gato" y "maullaba" para entender de qu√© hablas.',
    
    'entrenamiento': 'ChatGPT fue <strong>entrenado</strong> con enormes cantidades de texto de internet, libros, art√≠culos cient√≠ficos y otros datos. Primero aprende patrones del lenguaje (pre-entrenamiento), luego recibe ajuste fino con ejemplos corregidos por humanos (RLHF - Reinforcement Learning from Human Feedback).',
    
    'ia': 'La <strong>Inteligencia Artificial</strong> es un campo de la inform√°tica que busca crear sistemas capaces de realizar tareas que normalmente requieren inteligencia humana: entender lenguaje, reconocer patrones, tomar decisiones, resolver problemas. ChatGPT es un ejemplo de IA especializada en procesamiento de lenguaje natural.',
    
    'gpt': '<strong>GPT</strong> significa "Generative Pre-trained Transformer" (Transformador Generativo Pre-entrenado). Es una familia de modelos de lenguaje desarrollados por OpenAI. GPT-3, GPT-4 y GPT-5 son versiones cada vez m√°s avanzadas, con m√°s par√°metros y mejor capacidad de comprensi√≥n.',
    
    'default': 'Interesante pregunta. ChatGPT funciona analizando patrones en tu texto y prediciendo la mejor respuesta bas√°ndose en su entrenamiento masivo. ¬øQuieres saber algo m√°s espec√≠fico sobre: <em>tokens, transformer, l√≠mites, educaci√≥n, o c√≥mo funciona internamente</em>?'
  };

  if (chatForm && chatInput && chatMessages) {
    chatForm.addEventListener('submit', (e) => {
      e.preventDefault();
      
      const userMessage = chatInput.value.trim();
      if (!userMessage) return;

      // Agregar mensaje del usuario
      addChatMessage('user', userMessage);
      
      // Limpiar input
      chatInput.value = '';
      
      // Mostrar indicador de "escribiendo"
      showTypingIndicator();
      
      // Simular delay de respuesta (1.5 segundos)
      setTimeout(() => {
        removeTypingIndicator();
        
        // Buscar respuesta seg√∫n palabra clave
        let response = chatResponses.default;
        const lowerMessage = userMessage.toLowerCase();
        
        for (const [keyword, answer] of Object.entries(chatResponses)) {
          if (lowerMessage.includes(keyword)) {
            response = answer;
            break;
          }
        }
        
        // Agregar respuesta del bot
        addChatMessage('assistant', response);
      }, 1500);
    });
  }

  // Funci√≥n para agregar mensaje al chat
  function addChatMessage(type, text) {
    const row = document.createElement('div');
    row.className = `mini-chat-row mini-chat-${type}`;
    
    const avatar = document.createElement('div');
    avatar.className = 'mini-chat-avatar';
    avatar.textContent = type === 'user' ? 'T√ö' : 'GPT';
    
    const bubble = document.createElement('div');
    bubble.className = 'mini-chat-bubble';
    bubble.innerHTML = text;
    
    row.appendChild(avatar);
    row.appendChild(bubble);
    chatMessages.appendChild(row);
    
    // Scroll al final
    chatMessages.scrollTop = chatMessages.scrollHeight;
  }

  // Mostrar indicador de "escribiendo..."
  function showTypingIndicator() {
    const row = document.createElement('div');
    row.className = 'mini-chat-row mini-chat-assistant';
    row.id = 'typing-indicator';
    
    const avatar = document.createElement('div');
    avatar.className = 'mini-chat-avatar';
    avatar.textContent = 'GPT';
    
    const bubble = document.createElement('div');
    bubble.className = 'mini-chat-bubble typing-indicator';
    bubble.innerHTML = `
      <span class="typing-dot"></span>
      <span class="typing-dot"></span>
      <span class="typing-dot"></span>
    `;
    
    row.appendChild(avatar);
    row.appendChild(bubble);
    chatMessages.appendChild(row);
    
    chatMessages.scrollTop = chatMessages.scrollHeight;
  }

  // Remover indicador de "escribiendo..."
  function removeTypingIndicator() {
    const indicator = document.getElementById('typing-indicator');
    if (indicator) {
      indicator.remove();
    }
  }


  // ==========================================
  // 5. EFECTOS HOVER ADICIONALES
  // ==========================================
  
  // Cuando pasas el mouse sobre un paso, activa visualmente
  const interactiveSteps = document.querySelectorAll('.interactive-step');
  
  interactiveSteps.forEach((step, index) => {
    step.addEventListener('mouseenter', () => {
      step.classList.add('hovered');
    });
    
    step.addEventListener('mouseleave', () => {
      step.classList.remove('hovered');
    });
  });


  // ==========================================
  // 6. ANIMACI√ìN DE ENTRADA PROGRESIVA
  // ==========================================
  
  // Observador de intersecci√≥n para animar elementos al entrar en viewport
  const observerOptions = {
    threshold: 0.1,
    rootMargin: '0px 0px -50px 0px'
  };

  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        entry.target.style.opacity = '1';
        entry.target.style.transform = 'translateY(0)';
      }
    });
  }, observerOptions);

  // Observar todas las secciones
  document.querySelectorAll('.fx-block, .fx-flow-block, .fx-arch-block').forEach(section => {
    section.style.opacity = '0';
    section.style.transform = 'translateY(20px)';
    section.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
    observer.observe(section);
  });


  // ==========================================
  // 7. LOGS DE DEPURACI√ìN
  // ==========================================
  
  console.log('üìä Elementos inicializados:');
  console.log('  - Tokenizador:', tokenInput ? '‚úì' : '‚úó');
  console.log('  - Modales:', modalTriggers.length);
  console.log('  - Pasos de flujo:', flowSteps.length);
  console.log('  - Chat:', chatForm ? '‚úì' : '‚úó');
  console.log('  - Pasos interactivos:', interactiveSteps.length);
});


// ==========================================
// FUNCIONES GLOBALES PARA MODALES
// ==========================================

function openModal(modalId) {
  const modal = document.getElementById('modal' + modalId.charAt(0).toUpperCase() + modalId.slice(1));
  if (modal) {
    modal.classList.add('active');
    document.body.style.overflow = 'hidden'; // Prevenir scroll del body
  }
}

function closeModal(modalId) {
  const modal = document.getElementById('modal' + modalId.charAt(0).toUpperCase() + modalId.slice(1));
  if (modal) {
    modal.classList.remove('active');
    document.body.style.overflow = ''; // Restaurar scroll
  }
}


// ==========================================
// FUNCIONES GLOBALES AUXILIARES
// ==========================================

// Funci√≥n para scroll suave a un elemento
function scrollToElement(elementId) {
  const element = document.getElementById(elementId);
  if (element) {
    element.scrollIntoView({ behavior: 'smooth', block: 'start' });
  }
}

// Funci√≥n para copiar texto al portapapeles
function copyToClipboard(text) {
  if (navigator.clipboard && navigator.clipboard.writeText) {
    navigator.clipboard.writeText(text).then(() => {
      console.log('‚úì Texto copiado');
    }).catch(err => {
      console.error('Error al copiar:', err);
    });
  }
}